// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - switch: USE_OUTLINE_PASS
      vert: legacy/main-functions/outline-vs:vert
      frag: legacy/main-functions/outline-fs:frag
      rasterizerState:
        cullMode: front
      depthStencilState:
        depthFunc: less_equal
        depthTest: true
        depthWrite: true
      properties:
        lineWidth:     { value: 10, target: outlineParams.x }
        depthBias:     { value: 0,  target: outlineParams.y }
        baseColor:     { editor: { type: color } }
        baseColorMap:  { value: grey }
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: grey }
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], linear: true, editor: { type: color } }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        color:          { target: mainColor, linear: true, editor: { visible: false } } # backward compability
        rimWidth:       { value: 0.9, target: rimParams.x, editor: { slide: true, range: [0, 1.0], step: 0.001 } }
        rimPower:       { value: 1.0, target: rimParams.y, editor: { slide: true, range: [0.0, 10.0], step: 0.001 } }
        rimColor:       { value: [0.0, 1.0, 1.0, 1.0], linear: true, editor: { type: color } }
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/fog-vs>

  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    out lowp vec4 v_color;
  #endif

  #if USE_TEXTURE
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif


  #if USE_RIM_LIGHT
    out vec3 v_position;
    out vec3 v_normal;
  #endif

  vec4 vert () {
      StandardVertInput In;
      CCVertInput(In);

      mat4 matWorld, matWorldIT;
      CCGetWorldMatrixFull(matWorld, matWorldIT);

      vec4 worldPos = matWorld * In.position;

    #if USE_RIM_LIGHT
      v_position = worldPos.xyz;
      v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
    #endif

    #if USE_TEXTURE
      v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
      #endif
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    CC_TRANSFER_FOG(worldPos);
    return cc_matProj * cc_matView * worldPos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output-standard>
  #include <legacy/fog-fs>

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
  };

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif

  #if USE_RIM_LIGHT
    #include <builtin/uniforms/cc-global>
    in vec3 v_position;
    in vec3 v_normal;
    uniform RimConstants {
      vec4 rimColor;
      vec4 rimParams;
    };
  #endif

  vec4 frag () {
    vec4 o = mainColor;
    o.rgb *= colorScaleAndCutoff.xyz;

    #if USE_VERTEX_COLOR
      o.rgb *= SRGBToLinear(v_color.rgb);//use linear
      o.a *= v_color.a;
    #endif

    #if USE_TEXTURE
      vec4 texColor = texture(mainTexture, v_uv);
      texColor.rgb = SRGBToLinear(texColor.rgb);
      o *= texColor;
    #endif

    #if USE_ALPHA_TEST
      if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    #endif

    #if USE_RIM_LIGHT
      float rimWidth = rimParams.x;
      float rimLightPower = rimParams.y;

      vec3 eyeDirection = normalize(cc_cameraPos.xyz - v_position.xyz);
      float rimLightIntensity = 1.0 - dot(v_normal, eyeDirection);
      rimLightIntensity = pow(rimLightIntensity, rimLightPower);
      rimLightIntensity = smoothstep(1.0 - rimWidth, 1.0, rimLightIntensity);
      o.rgb += rimLightIntensity * rimColor.rgb;
    #endif

    CC_APPLY_FOG(o);
    return CCFragOutput(o);
  }
}%
