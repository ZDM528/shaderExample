// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        refleteTextureCube:       { value: white }
        waterNoiseTexture:        { value: white }
        fReflect:            { value: 0.5, target: reflectParam.x, editor: {slide: true, range: [0,5.0], step: 0.001} }
        fresnelPow:            { value: 0.5, target: reflectParam.y, editor: {slide: true, range: [0,5.0], step: 0.001} }
        rimColor:            { value: [1.0,1.0,1.0,1.0], editor: {type: color} }
  - name: transparent
    passes:
    - vert: general-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;
  uniform samplerCube refleteTextureCube;
  uniform sampler2D waterNoiseTexture;

  uniform Constant {
    vec4 mainColor;
    vec4 reflectParam;
    vec4 rimColor;
  };

  vec4 frag () {
    vec4 col = mainColor * texture(mainTexture, v_uv);
    CC_APPLY_FOG(col, v_position);

    float T = texture(waterNoiseTexture,v_uv * v_position.xz * 0.1 + cc_time.x * 0.4).r;
    vec3 V = normalize(v_position.xyz - cc_cameraPos.xyz);
    vec3 N = normalize(v_normal);
    vec3 R = (V - 2.0 * dot(V , N) * N ) + T * 0.03;
    vec4 flectColor = texture(refleteTextureCube,R);
    float fReflect = reflectParam.x;
    float fresnelPow = reflectParam.y;
    float fresnel = pow(1.0 -dot(N,-V),fresnelPow);

    col.rgb = mix(mainColor.rgb,flectColor.rgb,fReflect * fresnel);
    // col.rgb = mix(col.rgb, vec3(1.0), smoothstep(0.9,0.911,T));// 白色泡沫，效果跟噪声图有关
    // vec2 D = v_uv - vec2(0.5,0.5);
    // col.rgb = mix(col.rgb,rimColor.rgb, rimColor.a * smoothstep(0.0,0.3,dot(D,D)));  

    return CCFragOutput(col);
  }
}%


// https://www.bilibili.com/video/BV1zR4y1571S/?spm_id_from=333.788&vd_source=b5f24f16c26721eaab2420713cdfb3c4