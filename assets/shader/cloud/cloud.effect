// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        c0: { value: [1,0,0,1], editor: {type: color} }
        c1: { value: [0,1,0,1], editor: {type: color} }
        tiling0: { value: [1.0,1.0,0.1,0.1] }
        tiling1: { value: [1.0,1.0,0.07,0.07] }
        height: { value: 1}
}%
CCProgram unlit-vs %{
  
precision highp float;
#include <legacy/input-standard>
#include <builtin/uniforms/cc-global>
#include <legacy/local-batch>
#include <legacy/input-standard>
#include <legacy/fog-vs>
#include <legacy/shadow-map-vs>

in vec4 a_color;
#if HAS_SECOND_UV
  in vec2 a_texCoord1;
#endif

out vec3 v_position;
out vec3 v_normal;
out vec3 v_tangent;
out vec3 v_bitangent;
out vec2 v_uv;
out vec2 v_uv1;
out vec4 v_color;

uniform sampler2D mainTexture; 

uniform Param{
    vec4 c0;
    vec4 c1;
    vec4 tiling0;
    vec4 tiling1;
    float height;
};


vec4 vert () {
  StandardVertInput In;
  CCVertInput(In);

  mat4 matWorld, matWorldIT;
  CCGetWorldMatrixFull(matWorld, matWorldIT);


  vec4 p=In.position;
  vec4 baseColor0=texture(mainTexture,a_texCoord * tiling0.xy + cc_time.x  * tiling0.zw); // 第一张噪声贴图，通过tiling可调整翻滚的方向和速度
  vec4 baseColor1=texture(mainTexture,a_texCoord * tiling1.xy + cc_time.x  * tiling1.zw); // 第二张噪声贴图，通过tiling可调整翻滚的方向和速度
  p.y=((baseColor0.r+baseColor1.r) * 0.5 -0.5) * height;  // 最终显示效果 将 y控制在 -0.5~0.5

  vec4 pos = matWorld * p;

  v_position = pos.xyz;
  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order

  v_uv = a_texCoord;
  #if HAS_SECOND_UV
    v_uv1 = a_texCoord1;
  #endif

  v_color = (p.y+0.5) * (c0-c1) +c1; // 给片元着色器颜色，自定义凸起颜色C0,凹陷颜色c1

  CC_TRANSFER_FOG(pos);
  CC_TRANSFER_SHADOW(pos);

  return cc_matProj * (cc_matView * matWorld) * p;
}}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;
  in vec4 v_color;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
  };

  vec4 frag () {

    return v_color;
  }
}%
