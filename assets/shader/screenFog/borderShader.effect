// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        textureSize:    { value: [1, 1], target: textureSizeV.xy }
  - name: transparent
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-vs %{

  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/local-batch>
  #include <legacy/input-standard>
  #include <legacy/fog-vs>
  #include <legacy/shadow-map-vs>

  in vec4 a_color;
  #if HAS_SECOND_UV
    in vec2 a_texCoord1;
  #endif

  out vec3 v_position;
  out vec3 v_normal;
  out vec3 v_tangent;
  out vec3 v_bitangent;
  out vec2 v_uv;
  out vec4 v_color;

  out vec2 v_uv0;
  out vec2 v_uv1;
  out vec2 v_uv2;
  out vec2 v_uv3;
  out vec2 v_uv4;
  out vec2 v_uv5;
  out vec2 v_uv6;
  out vec2 v_uv7;
  out vec2 v_uv8;

  uniform ConstancVS{
    vec4 textureSizeV;
  };

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 pos = matWorld * In.position;

    v_position = pos.xyz;
    v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order

    v_uv = a_texCoord;
    #if SWIPT_UVY
      v_uv.y = 1.0 - v_uv.y;
    #endif
   
    v_color = a_color;

    CC_TRANSFER_FOG(pos);
    CC_TRANSFER_SHADOW(pos);

    // 纹素大小
    vec2 textureSize = textureSizeV.xy;
    vec2 texelSize = 1.0 / textureSize;

    v_uv0 = v_uv + texelSize * vec2(-1.0,1.0);
    v_uv1 = v_uv + texelSize * vec2(0.0,1.0);
    v_uv2 = v_uv + texelSize * vec2(1.0,1.0);
    v_uv3 = v_uv + texelSize * vec2(-1.0,0.0);
    v_uv4 = v_uv + texelSize * vec2(0.0,0.0);
    v_uv5 = v_uv + texelSize * vec2(1.0,0.0);
    v_uv6 = v_uv + texelSize * vec2(-1.0,-1.0);
    v_uv7 = v_uv + texelSize * vec2(0.0,-1.0);
    v_uv8 = v_uv + texelSize * vec2(1.0,-1.0);

    // return cc_matProj * (cc_matView * matWorld) * In.position;
    return vec4(sign(In.position.x),sign(In.position.y),0.0,1.0);
} 
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;

  in vec2 v_uv0;
  in vec2 v_uv1;
  in vec2 v_uv2;
  in vec2 v_uv3;
  in vec2 v_uv4;
  in vec2 v_uv5;
  in vec2 v_uv6;
  in vec2 v_uv7;
  in vec2 v_uv8;

  uniform sampler2D mainTexture;


  uniform Constant {
    vec4 mainColor;
  };

  // 明亮度转换公式
  float lumiance(vec4 color){
    return 0.2125 * color.r + 0.7154 * color.g + 0.0721 * color.b;
  }

  float sobel(){
    float Gx[9];
    Gx[0] = -1.0; Gx[1] = -2.0; Gx[2] = -1.0;
    Gx[3] =  0.0; Gx[4] =  0.0; Gx[5] = 0.0;
    Gx[6] =  1.0; Gx[7] =  2.0; Gx[8] = 1.0;

    float Gy[9];
    Gy[0] = -1.0; Gy[1] =  0.0; Gy[2] = 1.0;
    Gy[3] = -2.0; Gy[4] =  0.0; Gy[5] = 2.0;
    Gy[6] = -1.0; Gy[7] =  0.0; Gy[8] = 1.0;

    float texColor=0.0;
    float edgeX=0.0;
    float edgeY=0.0;

    texColor=lumiance(texture(mainTexture,v_uv0));
    edgeX += texColor * Gx[0]; 
    edgeY += texColor * Gy[0]; 

    texColor=lumiance(texture(mainTexture,v_uv1));
    edgeX += texColor * Gx[1]; 
    edgeY += texColor * Gy[1]; 

    texColor=lumiance(texture(mainTexture,v_uv2));
    edgeX += texColor * Gx[2]; 
    edgeY += texColor * Gy[2]; 

    texColor=lumiance(texture(mainTexture,v_uv3));
    edgeX += texColor * Gx[3]; 
    edgeY += texColor * Gy[3]; 

    texColor=lumiance(texture(mainTexture,v_uv4));
    edgeX += texColor * Gx[4]; 
    edgeY += texColor * Gy[4]; 

    texColor=lumiance(texture(mainTexture,v_uv5));
    edgeX += texColor * Gx[5]; 
    edgeY += texColor * Gy[5]; 

    texColor=lumiance(texture(mainTexture,v_uv6));
    edgeX += texColor * Gx[6]; 
    edgeY += texColor * Gy[6]; 

    texColor=lumiance(texture(mainTexture,v_uv7));
    edgeX += texColor * Gx[7]; 
    edgeY += texColor * Gy[7]; 

    texColor=lumiance(texture(mainTexture,v_uv8));
    edgeX += texColor * Gx[8]; 
    edgeY += texColor * Gy[8]; 


    // 梯度值越大。越是边缘点，接近1
    float edge =1.0-(abs(edgeX) + abs(edgeY));
    return edge;
  }

  vec4 frag () {
      float edge = sobel();
      vec4 edgeColor = vec4(edge);
     return CCFragOutput(edgeColor);
  }
}%
