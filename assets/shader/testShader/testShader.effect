// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
    #include <cc-global>
 
  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  float box(in vec2 st,in vec2 size){
    size = vec2(0.5) - size * 0.5;
    vec2 uv1 = smoothstep(size,size + vec2(0.001),st);
    vec2 uv2 = smoothstep(size,size + vec2(0.001),vec2(1.0 - st));
    vec2 uv3 = uv1 * uv2;
    return uv3.x  * uv3.y;
  }

  float cross(in vec2 st,float size){
    return box(st,vec2(size,size/3.0)) + box(st,vec2(size/3.0,size));
  }

  mat2 rotate2d(float angle){
    return mat2(cos(angle),-sin(angle),
                sin(angle),cos(angle));
  }

  mat2 scale(vec2 _scale){
    return mat2(_scale.x,0.0,
                0.0,_scale.y);
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    //  o.a *= 0.0;
    //  float y = -pow( uv0.x, 2.0 ) + 1.0;
    //  float c1 = smoothstep(y - 0.1, y, uv0.y);
    //  float c2 = smoothstep(y, y + 0.1, uv0.y) ;
    //  float c3 = c1 - c2; 
    //  vec4  addColor = c3 * vec4(0.0,1.0,0.0,1.0);
    //  o += addColor;

    //  float y = -abs(sin(uv0.x * 20.0)) * 0.3 + 1.0;
    //  float y = -uv0.x + 1.0;
    //  float y = -smoothstep( 0.0, 1.0, uv0.x ) + 1.0;
    //  float y = -(1.0 - cos(uv0.x * 3.14 / 2.0) ) + 1.0;
    //  float y = -pow(uv0.x, 5.0) + 1.0;
    //  float y = -(1.0 - sqrt(1.0 - pow(uv0.x, 2.0))) + 1.0;
    //  float c1 = step( y - 0.01, uv0.y );
    //  float c2 = step( y + 0.01, uv0.y );
    //  float c3 = c1 - c2; 
    //  vec4 startC = vec4(1.0,0.0,1.0,1.0);
    //  vec4 endC = vec4(0.0,1.0,0.0,1.0);
    //  vec4 c=vec4(0.0,1.0,0.0,1.0);
    //  vec4  addColor = c3 * mix(startC,endC,uv0.x);
    //  o += addColor;

    // float a = step(0.1,uv0.x);
    // float b = step(0.1,uv0.y);
    // float c = step(0.1,1.0 - uv0.x);
    // float d = step(0.1,1.0 - uv0.y);
    // vec3 addColor=vec3(a * b * c * d);
    // o *= vec4(addColor,1.0);

    // vec2 uv = uv0 * 2.0 - 1.0;
    // float distance =distance(abs(uv),vec2(0.3));
    // vec4 addColor = vec4(vec3(fract(distance * 1.0)),1.0);
    // o  *= addColor;

    // vec2 pos = vec2(0.5) - uv0;
    // float r = length(pos) * 2.0;
    // float a = atan( pos.y,pos.x);
    // float f =  cos( a * 1.0);
    // o *= vec4(1.0,0.0,0.0,f);

    // vec2 uv = uv0 + vec2(cos(cc_time.x),cos(cc_time.x)) * 0.15;
    // o *= vec4(vec3(cross(uv ,0.15)),1.0);

    // vec2 uv = uv0 - vec2(0.5);
    // uv = rotate2d(sin(cc_time.x) * 3.14) * uv;
    // uv = uv + vec2(0.5);
    // o *= vec4(vec3(cross(uv ,0.4)),1.0);

    // vec2 uv = uv0 - vec2(0.5);
    // uv = scale(vec2(sin(cc_time.x) +1.0)) * uv;
    // uv = uv + vec2(0.5);
    // o *= vec4(vec3(cross(uv ,0.4)),1.0);
  
    ALPHA_TEST(o);
    return o;
  }
}%
