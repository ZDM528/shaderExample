// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        u_inputTexture: { value: white}
        u_ScreenParams: {value: [1.0,1.0,1.0,1.0] }
        dirBlurStep: { value: 0.0}
        scaleBlurStep: { value: 0.0}
        blurDirection: {value: [1.0,1.0]}
        u_NoisePos: {value: [1.0,1.0]}
        u_Frequency: {value: 1.0}
        u_TwistRotFactor: {value: 24.0}
        u_TwistFactor: {value: 0.45}
        u_ScaleFactor: {value: 1.75}
        u_Distort: {value: 0.0}
        c1: {value: [1.0,1.0]}
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  out vec2 TexCoords;


  uniform Param{
    mat4 userMat;
    mat4 fitMat;
 
  };

  float u_OutputWidth = 200.0;
  float u_OutputHeight = 200.0;

  void transformUV(out vec2 uv) {
    float aspect = u_OutputWidth / u_OutputHeight;
    uv = vec2((uv0.x * 2. - 1.) * aspect, uv0.y * 2. - 1.);
    uv = (fitMat * userMat * vec4(uv, 0, 1)).xy;
    uv = vec2((uv.x / aspect + 1.) / 2., (uv.y + 1.) / 2.);
  }

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif

    color = a_color;
    uv0 = a_texCoord;
    transformUV(uv0);
    TexCoords = uv0;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
    #include <cc-global>
 
  in vec4 color;
  in vec2 TexCoords;
  uniform sampler2D u_inputTexture;


  float pi = 3.141592653589793;
  uniform Contant{
    vec4 u_ScreenParams;
    float dirBlurStep;
    float scaleBlurStep;
    vec2 blurDirection;
    vec2 u_NoisePos;
    vec2 c1;
    float u_Frequency;
    float u_TwistRotFactor;
    float u_TwistFactor;
    float u_ScaleFactor;
    float u_Distort;
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec2 rotate(vec2 uv, float angle)
  {
    float theta = angle / 180.0 * pi;
    mat2 rotMat2 = mat2(cos(theta), -sin(theta)
                        ,sin(theta), cos(theta));
    return rotMat2 * uv;
  }


  vec2 random2(vec2 st){
    st = vec2( dot(st,vec2(127.1,311.7)),
              dot(st,vec2(269.5,183.3)) );
    return -1.0 + 2.0*fract(sin(st)*43758.5453123);
  }

  const mat2 mtx = mat2( 0.80,  0.60, -0.60,  0.80 );

  float noise(vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    vec2 u = f*f*(3.0-2.0*f);

    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),
                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),
                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
  }


/* random number between 0 and 1 */
  float random(in vec3 scale, in float seed) {
    /* use the fragment position for randomness */
    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);
  }

  vec4 crossFade(sampler2D tex, in vec2 uv, in float dissolve) {
    return texture(tex, uv).rgba;
  }

 vec4 directionBlur(sampler2D tex, vec2 resolution, vec2 uv, vec2 directionOfBlur, float intensity)
  {
    vec2 pixelStep = 1.0 / resolution * intensity;
    float dircLength = length(directionOfBlur);
    pixelStep.x = directionOfBlur.x * 1.0 / dircLength * pixelStep.x;
    pixelStep.y = directionOfBlur.y * 1.0 / dircLength * pixelStep.y;

    vec4 color = vec4(0);
    const int num = 25;
    for (int i = -num; i <= num; i++)
    {
        vec2 blurCoord = uv + pixelStep * float(i);
        vec2 uvT = vec2(1.0 - abs(abs(blurCoord.x) - 1.0), 1.0 - abs(abs(blurCoord.y) - 1.0));
        color += texture(tex, uvT);
    }
    color /= float(2 * num + 1);
    return color;
 }

  vec4 getDirectionBlur(sampler2D tex,vec2 uv0,vec2 tmpBlurDirection)
  {
    vec2 resolution = vec2(u_ScreenParams.x, u_ScreenParams.y);
    vec4 resultColor = directionBlur(tex, resolution, uv0, tmpBlurDirection, dirBlurStep);
    vec4 retColor = vec4(resultColor.rgb, resultColor.a) * step(uv0.x, 2.0) * step(uv0.y, 2.0) * step(-1.0, uv0.x) * step(-1.0, uv0.y);
    return retColor;
  }

  vec4 getScaleBlur(sampler2D tex,vec2 uv0, vec2 uv1)
  {
    vec4 color = vec4(0.0);
    float total = 0.0;
    vec2 toCenter = vec2(0.5, 0.5) - uv0;
    float dissolve = 0.5;

    /* randomize the lookup values to hide the fixed number of samples */
    float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);
    const int num = 25;
    for (int t = 0; t <= num; t++) {
        float percent = (float(t) + offset) / float(num);
        float weight = 4.0 * (percent - percent * percent);

        vec2 curUV = uv0 + toCenter * percent * scaleBlurStep;
        vec2 curUV1 = uv1 + toCenter * percent * scaleBlurStep;
        vec2 uvT = vec2(1.0 - abs(abs(curUV1.x) - 1.0), 1.0 - abs(abs(curUV1.y) - 1.0));
        color += crossFade(tex, uvT, dissolve) * weight * step(curUV.x, 2.0) * step(curUV.y, 2.0) * step(-1.0, curUV.x) * step(-1.0, curUV.y);
        // color += crossFade(uvT + toCenter * percent * blurStep, dissolve) * weight;
        total += weight;
    }
    vec4 retColor = color / total;
    return retColor;
 }

   vec2 fishEye(vec2 uv, float strength, vec2 point)
   {
    uv.x = 1. - uv.x;
    uv += point;
    float d = length(uv);
    float z = sqrt(1. + d * d * strength);
    float r = d/z;
    float phi = atan(uv.y, uv.x);
    uv = vec2(r * cos(phi), r * sin(phi));
    uv -= point;
    uv.x = 1. - uv.x;
    return uv;
   }

  vec4 frag () {


    vec4 o = vec4(1, 1, 1, 1);
    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    #endif


    vec2 fragCoord = TexCoords;
    fragCoord.x *= u_ScreenParams.x/u_ScreenParams.y;
    vec2 st1 = ((fragCoord)) / u_ScaleFactor * u_Frequency + u_NoisePos;
    vec2 st2 = ((1. - fragCoord / u_ScaleFactor)) * u_Frequency + u_NoisePos;
    vec2 pos1 = vec2(st1);
    vec2 pos2 = vec2(st2);

    float x = noise(pos1);
    float y = noise(pos2);
    vec2 xy = rotate(vec2(x, y), u_TwistRotFactor);
    vec2 uv1= (TexCoords - .5) / u_ScaleFactor + .5;

    vec2 uv2 = uv1 - u_TwistFactor * xy;
    fragCoord = fishEye(uv2, u_Distort * 6.0, c1);


    vec2 odd = mod(fragCoord, 2.0); 
    fragCoord = mod(fragCoord, 1.0);
    vec2 tmpBlurDirection = blurDirection;
    if (odd.x > 1.0)
    {
        fragCoord.x = 1.0 - fragCoord.x;
        tmpBlurDirection.x = -tmpBlurDirection.x;
    }
    if (odd.y > 1.0)
    {
        fragCoord.y = 1.0 - fragCoord.y;
        tmpBlurDirection.y = -tmpBlurDirection.y;
    }

    vec4 result = texture(u_inputTexture, fragCoord);
  

    // o *= color;
    ALPHA_TEST(result);
    return result;
  }
}%
